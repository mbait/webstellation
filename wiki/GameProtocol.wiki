#summary Describes format of the protocol of client/server interaction

= Game Protocol =

== Overview ==

Clients use series of requests in [http://www.json.org/ JSON] format to communicate with a game server.  Requests are sent between a client and a server using POST method of HTTP protocol, where the text of a query is stored as value of the only variable named `r`.  Each query is an object (an unordered set of name/value pairs) that contains parameters of a game operation.  The correct query has mandatory parameter `action` containing the identifier of an operation for the server to perform.  Presence or absence of other parameters depends on a particular action.

The server's response on a request is also a JSON object with mandatory field `result` (containing string "`ok`", meaning successful query execution, or the identifier of an error occurred from the list [#Error_Messages below]).  Optionally, any response has field `message` containing a text message to the end user.  Again, depending on the type of an action, response object contains additional fields describing the result of an operation.

== Error Messages ==

=== Map Related Errors ===
|| `mapExists` || The specified title is already used to name another map. ||
|| `unknownMap` || A map with the specified name is not registered yet. ||
|| `badMapInfo` || The object of [#MapInfo MapInfo] structure is not formatted correctly. ||

=== User Related Errors ===
|| `alreadyTaken` || The specified user name is already taken by another user. ||
|| `unknownUser` || A user with the specified name is not registered yet. ||
|| `alreadyInGame` || The specified user is already playing a game. ||
|| `notInGame` || The specified user is not playing any game currently. ||

=== Game Related Errors ===
|| `gameExists` || The specified title is already used to name another game. ||
|| `unknownGame` || A game with the specified name was not registered yet. ||
|| `badGameInfo` || The object of [#GameInfo GameInfo] structure is not formatted correctly. ||
|| `badGameState` || The object of [#GameState GameState] structure is not formatted correctly. ||
|| `badMaxPlayers` || The specified maximal number of players allowable to compete in a  game is incorrect. ||
|| `alreadyMaxPlayers` || The number of registered players in a game is already maximal, so it is impossible to join the game currently. ||
|| `alreadyStarted` || The specified game is already started. ||
|| `notStarted` || The specified game is not started yet. ||
|| `notYourTurn` || The specified player could not make a move because it is turn of another player. ||
|| `badPlanet` || The index of a planet to build a base on is incorrect. ||

=== Other Errors ===
|| `generalError` || Any error other than that listed above. ||

== Structures ==

=== `PlanetInfo` ===
|| `x` || _integer_ || X-coordinate of the planet on Cartesian plane. ||
|| `y` || _integer_ || Y-coordinate of the planet on Cartesian plane. ||
|| `size` || _integer_ || Size of the planet; equals to 1, 2, or 3. ||
|| `neighbors` || _array_ || Indices of the adjacent planets. ||

=== `MapInfo` ===
|| `name` || _string_ || Name of the game map. ||
|| `planets` || _array_ || [#PlanetInfo PlanetInfo] structures that represent the planets.  Each of them forms a vertex in unordered graph.  Position of a vertex uniquely determined by its index and list of the neighbors.  Note that for purposes of visual simplicity a _planar_ graph is desirable. ||

=== `PlayerInfo` ===
|| `name` || _string_ || Name of the player. ||
|| `isReady` || _boolean_ || Readiness of the player to start the game he joined. ||

=== `GameInfo` ===
|| `name` || _string_ || Name of the game. ||
|| `map` || _string_ || Name of the game map used. ||
|| `maxPlayers` || _integer_ || The maximal allowable number of players in the game. ||
|| `players` || _array_ || Array of [#PlayerInfo PlayerInfo] structures that represent the players.  The players are ordered as they have joined the game (so the player who created the game is always the first one).  A player's turn is determined by the position of his name in this array. ||
|| `status` || _string_ || Status of the game; equals to "`preparing`", "`playing`", "`finished`", or "`loaded`".||

=== `PlanetState` ===
|| `owner` || _integer_ || Index of the player who owns the planet. ||
|| `bases` || _integer_ || The number of bases built on the planet; lays in range from zero to the size of this planet. ||

=== `PlayerScore` ===
|| `planets` || _integer_ || The number of planets owned by the player. ||
|| `bases || _integer_ || The number of bases owned by the player. ||
|| `influence` || _integer_ || The total influence of the player. ||

=== `GameState` ===
|| `active` || _integer_ || Index of the player who makes the turn (as in `players` array of `GameInfo` structure). ||
|| `planets` || _array_ || [#PlanetState PlanetState] structures that represent state of the planets. ||
|| `score` || _array_ || [#PlayerScore PlayerScore] structures that represents score of every player in the game. ||

== Queries ==

=== Map Related Queries ===
  * *`getMaps`* — List registered maps.
  Parameters:
    _none_
  Outcome:
    * `maps` — Array containing the names of registered maps in alphabetical order.
  Possible errors:
    * `generalError`
  * *`getMapInfo`* — Return information about a map.
  Parameters:
    * `mapName` — Name of the map.
  Outcome:
    * `map` — [#MapInfo MapInfo] structure.
  Possible errors:
    * `unknownMap`
    * `generalError`
  * *`uploadMap`* — Upload a map to the game server.
  Parameters:
    * `mapInfo` — [#MapInfo MapInfo] structure.
  Outcome:
    _none_
  Possible errors:
    * `mapExists`
    * `badMapInfo`
    * `generalError`

=== User Related Queries ===
  * *`getUsers`* — List registered users.
  Parameters:
    _none_
  Outcome:
    * `users` — Array containing the names of registered users in alphabetical order.
  Possible errors:
    * `generalError`
  * *`register`* — Register a user on the game server.
  Parameters:
    * `userName` — Name of the user.
  Outcome:
    _none_
  Possible errors:
    * `alreadyTaken`
    * `generalError`
  * *`joinGame`* — Join the specified user to a game.
  Parameters:
    * `userName` — Name of the user.
    * `gameName` — Name of the game.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `unknownGame`
    * `alreadyInGame`
    * `alreadyMaxPlayers`
    * `alreadyStarted`
    * `generalError`
  * *`toggleReady`* — Toggle player's readiness to start the game he's joined.  A game is started only when all of the participating players have declared their readiness.
  Parameters:
    * `userName` — Name of the user.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `notInGame`
    * `generalError`
  * *`leaveGame`* — Unregister a player from the game he's participating.
  Parameters:
    * `userName` — Name of the user.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `notInGame`
    * `generalError`
  * *`logout`* — Unregister a user from the game server.
  Parameters:
    * `userName` — Name of the user.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `generalError`

=== Game Related Queries ===
  * *`getGames`* — List registered games.
  Parameters:
    _none_
  Outcome:
    * `games` — Array containing the names of registered games in alphabetical order.
  Possible errors:
    * `generalError`
  * *`getGameInfo`* — Return information about a game.
  Parameters:
    * `gameName` — Name of the game.
  Outcome:
    * `game` — [#GameInfo GameInfo] structure.
  Possible errors:
    * `unknownGame`
    * `generalError`
  * *`createGame`* — Create a game on the game server.
  Parameters:
    * `gameName` — Name of the game.
    * `userName` — Name of the user that creates the game.  Note that this user would have the first turn (see description of [#GameInfo GameInfo] structure).
    * `mapName` — Name of the game map to use.
    * `maxPlayers` — The maximal allowable number of players in this game; it's an integer in range from 2 to 10.
  Outcome:
    _none_
  Possible errors:
    * `gameExists`
    * `unknownUser`
    * `unknownMap`
    * `badMaxPlayers`
    * `alreadyInGame`
    * `generalError`
  * *`loadGame`* — Upload a saved earlier game.
  Parameters:
    * `userName` — Name of the user that uploads this game.
    * `gameInfo` — [#GameInfo GameInfo] structure.
    * `gameState` — [#GameState GameState] structure.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `gameExists`
    * `badGameInfo`
    * `badGameState`
    * `alreadyInGame`
    * `generalError`
  * *`getGameState`* — Return the state of a game playing.
  Parameters:
    * `gameName` — Name of the game.
  Outcome:
    * `game` — [#GameState GameState] structure.
  Possible errors:
    * `unknownGame`
    * `notStarted`
    * `generalError`
  * *`move`* — Make a move.
  Parameters:
    * `userName` — Name of the user that makes the move.
    * `planet` — Index of the planet where a base should be built.  Planets are numbered starting from zero and ordered as in `planets` array of [#MapInfo MapInfo] structure.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `notYourMove`
    * `badPlanet`
    * `generalError`
  * *`surrender`* — Concede a player's defeat.
  Parameters:
    * `userName` — Name of the surrendered player.
  Outcome:
    _none_
  Possible errors:
    * `unknownUser`
    * `notInGame`
    * `generalError`